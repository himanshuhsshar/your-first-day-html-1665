Introduction and Project Overview
Introduction and Project Overview
Hi. I'm Susan with Digital-Tutors, and this is Your First Day with HTML. In this course, we'll learn about the basic software you use to create web pages, HTML syntax, document structure, and some basic HTML tags by creating an article-style web page. We'll also learn about web standards and HTML validation, which will help us follow best practices on the web. After this course is over, you'll know how to create HTML files and add basic content to a web page such as headings, paragraphs, images, and links. So with that, let's get started by setting up our text editor, the basic tool we'll be using to create our HTML files.

Your First Day with HTML
Setting up Brackets Text Editor
In this lesson, we're going to be discussing our basic tool we'll be using to create and edit HTML files, text editors. In this course, we'll be using a text editor called Brackets. It's an open-source project sponsored by Adobe, and it's cross-platform, meaning it works for Mac, Windows, and Linux. And it's also free and open source, so it's an awesome choice. But the main reason we'll be using it is for its Live Preview feature, so I'm going to pull it up real fast here, and we'll see what this does for us. And I just pulled up the Brackets text editor here, and this is the project file that opens automatically once you've downloaded it. And the awesome thing about this is if you click this lightning icon here in the top right, it opens up your file in the browser window. And this is awesome because if we're making a change here to this tag, if you keep an eye here on the window to the right, you can see that those changes are actually updating live in our browser. So this is really, really cool because in traditional text editors, you have to save each time you make a change, and then refresh your browser every time to see that change in a window. So this will save us a lot of time and we can see our changes immediately as they happen in the window. So that's just a really, really cool feature of Brackets. But right now it only works with Chrome browser, so if you don't already have that installed on your computer, just make sure you grab it from this link here, which I've included in our links. rtf file in our Project folder. And I also have included the link to Brackets website as well. Now if you don't want to use Brackets for some reason, you could also use any text editor to create our HTML files. Sublime Text editor is another great option. It's cross-platform compatible, but it does cost a small fee for the license, so it is not free like Brackets. Notepad++ is another good choice, but it only works on Windows, although it is free and it has a lot of awesome features. So if you are using something other than Brackets, just make sure that you have loaded your files manually in the browser of your choice and just make sure that that browser is also up to date. So you'll just need to save after every change we make and then refresh it in the browser window. So in our next lesson, we're going to get started by learning about HTML syntax, or the basic rules that allow us write HTML.

HTML Document Structure
In this lesson, we're going to be introduced to basic HTML syntax and learn about the basic structure we'll need to create our first HTML files. So this is just an example of a very basic HTML file with just the needed structure we dated and placed to begin adding our content. And this might look kind of confusing at first, but that's completely normal and completely okay because we'll be applying this as we go along. It'll start to make a lot more sense as we start to use it our self. And the first thing we need to add to our page is this thing right here, and it's called the DOCTYPE declaration. And what this does is it just tells the browser what version of HTML we're going to be using. So in this case, we're going to be using HTML5, which is the most current and standardized version of HTML. Now if you're working on older HTML files, you might come across a DOCTYPE declaration that looks like this. And all this is, is an older version of a DOCTYPE declaration. You can see it's using HTML 4. 01, which is an older version of HTML. And you can see with our new version of HTML that they greatly simplified the tag from what it used to be, so this is really great for us. It's a lot easier to remember. And the next thing we need to add to our page is what's called an HTML tag. And don't get too confused by this syntax or the semantics of the naming here because we're going to be going over this more in depth in a later lesson, and this will also start to make sense. So basically, what you need to remember here is just the structure of these tags. And this is an HTML tag, and it's just telling the browser that everything inside of these tags is going to be HTML code. And you can see we have one at the top where our HTML starts, and then we have another at the end of our file to tell the browser that this is where HTML ends, and you can see our closing tag just has a forward slash inside. And the next thing we'll need to add to our page is what's called the head section. And you can think of this as kind of the brain section of our HTML file, and it's just giving the browser additional information and telling it how it needs to think about this file. So we'll add associated tags, such as a title here, to give the browser more information about our file. And the last thing we need to add to our page is this section right here, which is called the body section. And you can see it has an opening tag and a closing tag with a forward slash as well. And what goes in here is all the tags and content that the user will be seeing in the browser window. So everything in the body section gives the web page its structure and contains all of the content that will be seen. So now that we've seen a very basic intro to HTML document structure, we'll be setting up our first file and writing our first code by adding that structure in our next lesson.

Setting up Our First HTML File and Writing Our First Code
So now we know a little bit about the structure we need to create our first file. We'll be creating that file, naming it, and then adding that needed structure. So this is just a mock up of the web page we'll be building over the next couple of lessons. And it's in our 04_start file, and it's titled MockUp. jpg. And you can see we just have a very simple article-style web page here, and we have an image, a couple of different sizes of headings, and then a couple paragraphs of content. And at the end here, we have an additional section with a link in it. And we're going to be learning about all of the needed tags and syntax to add all of this content to our web page over the next couple of lessons. So before we start doing that, there's a couple things we need to know about naming our first file. And the first thing we need to know about naming our first file is that we can't start it with anything other than a lowercase letter. And the other thing we need to know is we can't use special characters or spaces in that file name. And if you do have a file that's made up of multiple words, you can use hyphens, underscores, or what's called CamelCase to kind of add that separation between words. And you can see CamelCase right here, and it's just taking the first letter of the second word and making it uppercase to kind of add that separation between words and making it easier to read. But one thing you want to remember here is just to keep one of these, or choose one of these naming conventions for multiple words and keep it consistent, that way your files don't look sloppy. And the last thing we need to know is that index. html is the standard name for a home page, and that's actually what the browser looks for to display as your landing or home page. And since we're building just a simple one-page site, we'll be naming all of our web pages, index. html. And I've just opened our Brackets text editor, and you'll want to come and open our 04_start file just by coming up to File and then opening folder. So we're going to come up here to New to create a new untitled file, and then we're going to save it as that standard naming convention, index. html. And it's important to note here that we want to name all of our files using this. html extension because otherwise our text editor and our browsers won't understand that this is an HTML file, and they won't work. So it's really, really important to remember to use this. html extension when you're saving any HTML file. So we're going to hit Save here, and you can see we have just our blank index. html file. And I'm going to bring up that document structure once again so we can just be reminded of what we need to add here for our file to work. All right, and this is just the very basic document we looked at in our last lesson. And if you remember, we needed a DOCTYPE declaration, an HTML opening and closing tag, and then a head and a body section. So we're going to get started and add all this structure to our blank index. html file. All right, so once again the first thing we needed to add was that DOCTYPE declaration to tell it we're using HTML5. So we're going to add that less than or left-angle bracket, an exclamation point, and then that's just DOCTYPE in all caps, and then html in lowercase, and our right-angle bracket. And the next thing we needed to add to our page is that opening and closing HTML tag, so we'll just go ahead and type that in. And as we add our right-angle bracket, or greater-than sign, you can see that Brackets automatically closes our tags for us, which is really, really nice because it can be easy to forget to close a tag if it doesn't do that for us, so that's pretty convenient there. And I'm just going to press Enter a couple times so we can add some space and give some room to add the rest of our structure here. So the next thing we needed to add to our page is that head section. And I'm just going to press Tab here so we indent our next tag to show us that it's inside of this HTML tag. And all this does is just help us keep our file a little bit more organized here, and we can see at a glance what tags are inside of other tags. So we're just going to add that head section by typing in that head tag, and once it automatically closes for it, I'm just going to press Enter to give ourselves some space to add a couple tags inside of this head section. And at this point, I'm going to shrink our text editor window and press this lightning icon in the top right so it brings up that Live Preview feature, and we can see how a tag we're about to add here is going to make a change. And if you're using a text editor other than Brackets, you'll just want to load this file in the browser of your choice. And you'll just have to save and refresh after each change we make to be able to see it, since Brackets just does this automatically for us. And the tag we want to add here is called the title tag, and this is going to give our page a name, so that's just title, and then we're going to type the title inside of this opening and closing title tag. And keep your eye here at the tab in our browser window and see how it changes once we start adding our title. So we're going to name this something commonsense like Our First Website since that's what we're creating, and if you kept your eye up here over in our browser window, you can see that the title we're typing in here is updating and showing in the window, which is exactly what this title tag does. So we need one last tag here in our head section, which is the meta tag. And the meta tag doesn't have any content inside of it like our title tag does, so it actually doesn't have a closing tag. So we're just going to type that meta in, and what we do need here is to add what's called an attribute. And don't get too bogged down by the terminology here because we're going to learn more about attributes as we go along. And all they do is give information about a tag inside of that tag. So we're going to click to highlight inside of this tag and press Space, and you can see that our text editor is already pulling up a list of options we can add as attributes. And we want the second option here, which is charset. And you can see it'll pull up an equal sign and then some quotation marks, which is we'll be adding that additional information. And all this does is telling our browser what character encoding we're going to be using. Because if weren't to add our meta tag here, although our website would work, which you can see in our browser it is working, it's going to be guessing what type of character encoding we're going to use. And it's going to throw up an error, which we don't want. We don't want any errors in our code, and we just want to get in the habit of using this meta tag with that character encoding. So we're going to use UTF-8, which is the standard for the web, and it automatically includes information about the character sets in many different languages already. So, it's a great choice. So that's everything we need inside of our head tag, so we just need to add the last section we need to finish our structure. And I'm going to press Tab again, and we're going to add that right under our head section. And that was the body section, so let's just go ahead and type that in. And I'm going to press Enter and give ourselves some space because we'll be adding all of our content in the structure that the user sees in the browser window inside of this body section. So in our next lesson, we're going to be reviewing HTML syntax and using paragraph tags to start marking up some of our content and structure.

HTML Syntax and Using the p Tag to Add Paragraphs
So now that we've set up the structure for our file, we're going to be learning about basic HTML syntax or the rules that allow us to write HTML. And we're going to finish up by learning about one of the most basic types of tags, the paragraph tag, which will allow us to format our content into paragraphs. So you may have noticed while we were adding our structure that HTML is completely made up of tags, which look something like this. And this is just the syntax for a paragraph tag, which we'll be using in this lesson. And you can see that we have our tag name and these angle brackets, or chevrons, which in this case since it's a paragraph tag we have p, which is short for paragraph. And a tag has two parts. It has an opening tag where our element starts and a closing tag with a forward slash. And what these do is just tell the browser where an element starts and where it should end. And I'm just going to pull up our document from last time so we can kind of see how this affected that. All right, so this is where we left off last time. And if you could look at the tags we added here, you can see the first one we added was this HTML tag, which told the browser where our HTML started. And then we had our closing HTML tag that told the browser where it ended. And similarly for example, in our title tag, we had our opening title tag that told the browser that this is where our title started and our closing tag where it should end. And another thing you may have noticed about when we're writing our tags is that we wrote them using lowercase letters. And although uppercase letters would work for our tags, we want to use lowercase because it's considered best practice. And another thing you might hear all the time when working on web pages is these referred to as HTML elements. And all that means is that once we have our tag name and content inside of it, we would refer to this whole thing as an element. So for example, in our little screenshot right here, this would be referred to as a paragraph element. So now that we know some basic information about our HTML syntax, we'll begin marking up our content into paragraph sections. All right, so I've just opened our 05_start file, and it'll open all the files inside of that folder. And you can do the same just by, once again, coming up to File and then opening that folder. And if you look off from where we left off last time, I've just added all the paragraph content from our mock up just to save us the trouble of typing that up. So we're going to get started by clicking this lightning icon, which will pull up that Live Preview window of our content. And once this loads, if you take a look in our text editor, you could see although our content is displaying in paragraphs, in our browser window it's kind of jamming up all together. So if you see where our second paragraph starts, you can see in the browser that this is just jamming up right along with our last paragraph. And there are a couple reasons for this. And the first is that the browser only understands code, so since we haven't wrapped any of this content in our HTML tags, the browser doesn't understand how we want it to be displayed. And the other thing is that the browser ignores whitespace, so even though we have a line of whitespace in our text editor, if we were to come in here and add additional lines of whitespace you can see that it's doing nothing at all inside of our browser window. So let's get started and add that first paragraph to our first section. And once again, that paragraph tag was just shortened to p, so if we just type that in, once we add our right-angle bracket you can see that Brackets text editor is automatically closing our tag for us. So I'm just going to delete that automatically closed tag. And we'll come down here to where our paragraph ends with this last word, and we'll close our paragraph tag there. So I'm just going to add that left-angle bracket and our forward slash, and then Brackets will add the rest of that closing tag there. And if you look in our browser window now, you can see that our first paragraph is now formatted exactly how we would expect it to with a break, a space, after that paragraph. So now let's add that paragraph tag to the second paragraph here in our text editor. So I'm just going to type that in, and once again close that automatically close tag, and then come down here to the end of the paragraph with this last word and add our closing tag right there. And if you take a look in our browser window, you can see that it's added a space after this paragraph as well. So we'll just finish up by adding this last paragraph around our last section here. All right, and I'm going to close it right after that link. And one thing you might notice is that your browser is using a different font, and that's because most browsers use Times or Times New Roman as that default font to display pages in. And mine is using Open Sans, so it might look a little bit different from yours and that's completely okay. So now that we've formatted our paragraphs how we want them to be displayed, in our next lesson we'll begin adding the headings and learning about what different types of heading tags we can use to mark those up.

Working with Heading Tags
In this lesson, we're going to be looking at the different kinds of heading tags we can use, and then using those tags to mark up our headings. So from where we left off last time, I've just added the headings from our MockUp just to save us the trouble from typing them out ourselves. So if you're just where we left off, you can open the 06_start folder or you can type in these headings yourself. So before we get started by adding these heading tags, we're going to come in here in our 06_start file and open this headings. html file. And then I'm just going to pull up this file in our browser. And if you take a look here, we can see we have several different sizes of headings. And if you look over in our text editor, you can see we have multiple syntaxes for these heading types. And what this does is we have just an h, which is short for heading, and then a number. And this tells the browser what level our headings should file in, in the hierarchy or its importance. So for example, our h1 is considered the most important heading on a page, and you can see it's the largest heading that's displayed, and it goes all the way down until our least important tag and the smallest tag displayed, which is this level 6 heading tag. So when you're adding headings to your pages, you can kind of think about where it'd fall naturally in this hierarchy, and you could use that appropriate head tag to mark it up. So we're going to switch back over to our index. html, which is our project file. And if you take a look in our browser, you can see that our headings, our first two, are kind of jamming up together, and then our heading in the middle here is just right between those two paragraphs. So, we're going to change how these format using that heading tag. And our first heading here, I'm just going to pull up our mock up once again, you can see that it's the largest heading on our page because it's the most important and it holds the subject of our entire page. So the h1 heading tag is the perfect choice for this scenario, so we're going to mark up our first heading using that h1 tag. So we're just going to come up here right under the body tag to our first heading and add that h1. And once again, I'm just going to delete this automatically close tag and add it at the end after our first heading. And if you look over here in our browser, you can see immediately that it's increased the size of that text, and it's made it bold. And that's exactly how we expect a heading to be different from the rest of our content. Just like if you pull up our mock up here, you can see it's also bold and larger than our paragraphs here. So for our subheading, we're going to use the next most important tag, which is the level 2 h2 tag. And this is right under our first heading, so we're just going to mark that up using that h2 tag. And I'm just going to delete that automatically close tag, and then add it right there at the end. And if you keep your eye on our browser window on the right as I'm closing that tag, you can see it's going from displaying in the same font size and style as our paragraphs to being bold and displayed in a larger size than this paragraph, which is exactly what our headings do. They tell the browser that they should be displayed as headings. So we're going to come in here to our last heading, which if we look at our mock up, you can see it's slightly smaller than our h2 heading because it's breaking up the body of our text. So in our level of hierarchy of our headings, it makes perfect sense to use the next level heading here, which is that h3 tag. So we're going to wrap this tag right here and that h3 tag. And just remember at this point, if you're using a text editor other than Brackets to be saving after you are making these changes, and then you'll just have to refresh them to see that change in the browser window. So I'm just going to go ahead and close this h3 heading, and if you look over here in our window, you can see that this heading is slightly smaller than our h2, and it's also been made bold. And now that we've marked up our headings, in our next lesson we're going to learn how to add comments to our HTML file.

Adding Comments to Our HTML File
In this lesson, we're going to learn how to add comments to our file. So I just have our 07_start folder open in our text editor, and once again we're working on our index. html file. And if you take a look from where we left off last time, you can see we've formatted our headings using those appropriate heading tags. And now we're going to learn how to add comments by taking our last section here and adding a comment just to remind us to come in and turn this link into a working link in a later lesson. So we're just going to come over here in our text editor to this last paragraph section and click right before the start of our link to begin adding that comment syntax. And the way we add a comment is we just type in our left-angle bracket and exclamation point, and then two hyphens. And then where we want our comment to end, in this case we want it added at the very end of our link, we just add two more hyphens and then our right-angle bracket. And if you take a look in our browser window here, you could see as I added that last little bit of syntax, the two hyphens, and then a right-angle bracket to close our code, our paragraph tag became blue once again, and then everything inside of that comment section is no longer visible in the browser window. So I'm just going to delete that closing section real fast so we can see this again. And you can see that once we've removed that comment, that that's invisible once again. So I'm just going to add that back again real fast, and then close it right at the end of that link. And inside, we'll just add some text, so I'm going to press Enter to give us a line of space, and we can add a note to add a link to the page later. And you can see that the text writing inside this comment is also not visible on the page. So what this does for us is it allows us to add comments only for our benefit, and they can only be seen inside of our text editor, and they're just completely ignored by the browser. That way, if you want to add a note like this here in your code or if you wanted to tell someone else who was working on your code what you intended here, that's exactly what comments are meant for. And you could also wrap entire sections of code using a comment. So if you wanted to see what your page looked like without a section, let's say I wanted to come up here to our h3 heading, I could add that comment section or syntax, which once again is the left-angle bracket, that exclamation point, and then those two hyphens. And if I were to close it right here at the end with the two hyphens and our right-angle bracket, you can see now that that entire section of code is no longer visible in our browser window. So it considers everything inside of that comment syntax to be part of the comment. So now that we've added our comment, I'm going to just delete this example comment right here because we do want that to show in the page. And our next lesson, we're going to be adding an image, our first visual kind of element.

Using HTML Image Tags
Now that we've learned how to mark up our content into paragraphs, headings, and how to add comments, we're going to be adding our first visual element to our page, which is our bee image. All right, so I've just pulled up our 08_start file in our text editor, and I have our mock up open on the right. And if you take a look here, we are going to be adding our bee image right above our biggest heading, which is that heading inside of our h1 tag. But before we add that image, we're going to come over here to File, Open, and make sure we're in our 08_start folder. And we're going to right-click and come to New, Folder. And we're going to name this folder images and put our bee. jpg file inside of this images folder. And we can go ahead and just add our mock up inside of that images folder as well. So if we open up our images folders, you can see we now have that bee file and our MockUp file inside. And the reason for doing this is just it's best practice to keep our file types separate. So we're just going to create that images folder so we can keep all of our visual assets inside, and I'm just going to press Cancel. And if you look over here on the side, you can see now we have this little drop-down arrow, and we can see all of our images inside of that folder. So we're going to come up here right above our h1 tag, which is where we'll add that tag to add our image, and I'm going to minimize our mock up and just bring up that Live Preview window so we can see this as it's happening. And the tag we use to add an image is shortened to img, which is short for image, so we're just going to go ahead and type that in, and then add our right-angle bracket. And you can see that Brackets hasn't added a close tag after this, and the reason for that is because our image tag doesn't have any content like our heading tags or our title tags. It's more like our meta tag here, which also doesn't have a closing tag. And also like our meta tag, we need an attribute inside of our tag. And once again, an attribute just tells the browser additional information about a tag, and it's added inside of the tag. So we're going to click to highlight our image tag and press Space and begin adding this attribute inside of this tag. And the attribute we want inside of this tag is just src, which is short for source, and it's going to tell the browser the location of the image we want to show on our page. So we're going to set this equal to, and then open and close our quotation marks, and we're going to add the file path to tell the browser where to look for our images. And the file path starts relative to the file you're working out of, so in our case, that's our index. html file. So it's going to start there. And if you remember in Windows Explorer when we had it pulled up, we added that folder, or we added our image inside of that images folder. So we're going to tell it to look inside of that folder and add a forward slash to tell it it's inside. And then you can see that Brackets has pulled up all of our image files inside of that folder, and we want to select that bee. jpg to add that in. And if you look in our browser on the right, you can see that our image is now displaying right above our heading. And if I were to Ctrl+X to cut this tag, you can see wherever I'm pasting that tag, that's exactly where our image is displaying. So wherever you place that tag, that's exactly where you'll see your image in the browser. So I'm just going to move this right back above our h1 heading because that's exactly where we want it to be showing. And another thing you might notice about this is it's displaying our image at exactly the resolution of our file. And although our image is working right now, we just need one more attribute inside of this image for our code to be accessible. And what this means is that if someone were not, if they had visual impairments and they couldn't see our image, we're going to be adding additional information so they're not missing out on that content. And we're going to do this with the alt attribute, so just press Space and type in alt=, and then open and close some quotation marks. And we're going to put some text in here that's going to describe our image to make sure that those users aren't missing out on that content. So our picture is an image of a honey bee, so that makes sense to type that in for our alt text. So I'm just going to go ahead and type that in and hit Ctrl+S to save. And one other thing this alt tag does is it displays this content when our file path is broken. That way, if our link to our image is broken, then those users aren't missing out on that content as well. And this doesn't work with our Live Preview in Brackets, so I'm going to pull up Firefox real fast so we can see it in there. All right, so I've just pulled up our index file in Firefox web browser, and now I'm going to refresh now that we've added our image. And now I'm going to purposefully break this link path here so we can see what happens with our alt tags. So I'm just going to rename this to bees. jpg, which is not the name of our file. And if I come over here and press Ctrl+R to refresh, you can see that anything we type inside of this alt attribute is what displays in the browser window if they can't see that image. So this is great for both usability and accessibility. So now that we know how to add our image to our page, in our next lesson we're going to come back and add our link to this comment section.

Adding a Link Using the Anchor Tag
In this lesson, we're going to be adding our link to our comment section and learning about two different kinds of links. All right, so I just have our 09_start file open in our text editor and that Live Preview pulled up here. And we're going to come down here into this comment we added earlier and delete this syntax for the comment so we can begin turning this into a working link. So I'm just going to come in here and delete this first little part with the exclamation point and the hyphens, and then make sure that you get this last little bit here so we don't have that showing in the browser window. All right, and the way we add a link is with what's called the anchor tag. And you can think of this as just adding an anchor on your page to another site. And this is just abbreviated as a, so let's just come in here right before our link and we'll add that a tag. And I'm just going to delete this last little bit of the text, or the closing tag, and add it right after our link here. And everything that's displaying inside of this anchor tag is what the user's going to see on the page, so you'll see a lot of links that say, click here, but that's actually kind of tacky because your users don't know what they can find by following your link. So you want to give them some kind of textual clue here to tell them what they're going to find. So for example, if you wanted to type in Wikipedia to tell them that they'll find a Wikipedia page in this link, then that'd be perfectly acceptable as well. But if you look at the bottom here, you can see that it's not displaying a link like we expect it to, and we can't click it to open a page anywhere. So what's missing here is we need an attribute inside of our anchor tag to tell it where to find that link. So we're going to come in here inside of our opening anchor tag and add what's called an href attribute. And this is just short for hypertext reference, so it's referencing another web page. So we're going to go ahead and type that in, just href=, and then open and close some quotation marks. And then this is where we'll tell it where we want to open our links. So I'm just going to copy the text inside of our anchor tag and paste it inside of these quotation marks. And we need one little extra bit here for our link to work, and that's that traditional http with a colon and two forward slashes. And we'll see what this does in just a minute. So now if you take a look over at the bottom of our web page that it's now displaying as a link, and if we were to open it in a new tab, which I'm going to do by pressing my middle mouse button, then you can see that it's linking to our page just how we expect it to. Now if we were to forget to add this little http part here, I'm going to delete that out. If we open it in a new tab, you can see it has my IP address here, and then our link. And what this is doing as it's trying open it has a relative link, meaning it's trying to open this link relative to the file we're linking in. So in our case, it's trying to find where our index. html file is and open it in a folder relative to that file. So for example, if you take a look at our image tag here, we link to our bee image using a relative link also. So by adding that http, you're telling it that it's what's called an absolute link, and that's an absolute location that never changes. So if you're adding links to another page within your site, you'd want to use a relative link to tell it it's in the same website or the same project. And if you're linking to an external site, you'd want to use this http to tell it that it's an absolute link and it's outside of your website. So that's just a really important difference to note when you're adding your links. So I'm going to pull up our web page once again, and pull up our mock up side by side. All right, so I just have our mock up on the left and then the page we've built on the right. And if you look at them side by side they look really, really close, and you can see that all of our basic content and structure is in place. And if you wanted it to look exactly like our mock up on the left, then you'd need some additional code in an additional language in what's called Cascading Style Sheets, or CSS, which we cover in another course. So now that we have created our web page, in our next lesson we are going to learn about web standards and HTML validation.

Web Standards and HTML Validation
In this lesson, we're going to learn about web standards and how to validate our HTML. So in your time learning about web pages and websites, one thing you'll hear mentioned a lot is web standards. And they're just a set of best practices and guidelines that were developed for the web with a goal of making sure that the web can be used and accessed by anyone on any device, and to make sure that it follows the basic open principles. And web standards also help you write HTML the right way and make sure you don't have any errors in your code. And by following web standards, there are a lot of benefits you can get such as SEO, which is search engine optimization, and making sure your pages rank well when they're searched for with a search engine. Another benefit is accessibility, which is just designing and developing pages in a way that they can be used by anyone. So for example, if you have a user that can't see and is using a screen reader to read out the content of your website making sure that they're not missing out on any of your content, such as when we added that alt attribute to that image, that helps your content be accessible to those users as well. And also there's a long way towards making your code maintainable, meaning making sure it works in both past technologies and in future technologies with little to no changes, and that it works on multiple devices and in multiple browsers. And if you are interested in learning about web standards and learning about the history that went into creating them, you can follow this website right here, which I'll include in our links. rtf file. And one thing that goes right along with web standards is validating your HTML. And this is just checking to see if you're using correct syntax and you don't have any errors in your code and you're following basic web standards. And it can be found at this website, validator. w3. org. So I'm going to open our page in this validator and see if we've made any errors in our code. All right, so I've just gone to that website validator. w3. org, and I have pulled up our index. html project file by this file upload service. And we're just going to press this Check button, and it's going to see if our code is valid. So once this loads, you can see that our document was successfully checked as HTML5. And you do see one little warning here. And if you scroll down, you can see more information about that warning. And it's just saying that we're using an experimental feature of this checker, meaning it hasn't been fully developed to check HTML5. So it's just a little warning there that some features might not be reliable. But we're going to come over here to this new tab, and I've uploaded a different document, and we'll see what happens when we have errors in our code. So I'm just going to press Check, and you can see that now we have a red warning here telling us that there are errors found while checking our document. And if you scroll down here, you can see that it has at the top, our warnings, and then below we have our errors. You can see it's warning us that we didn't use character encoding, so if you remember when we added that meta tag with our charset to tell it what character encoding to use, you can see that we have all kinds of issues that result from not setting that. And you can see that it's not even guessing what kind of character encoding we wanted to use, which was utf-8, and it's using Windows character encoding. And it'll also tell you where in your code to find those errors and try to give you hints about what you can do to fix them. So it's really, really helpful to always come in and validate your code using this service to see what kind of errors and warnings you have, if any. So now that we have learned about what HTML is, web standards, and basic HTML document structure, and then how to add content to our page using heading, paragraph, image, and links tags, there are many more exciting features and tags of HTML you can learn about. You can also learn how to change the look and feel of your HTML elements using what's called Cascading Style Sheets, or CSS, which will be covered in our introductory CSS course. So thanks for listening, and I really hope you've enjoyed Your First Day with HTML.